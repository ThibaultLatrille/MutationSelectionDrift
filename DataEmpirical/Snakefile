import os
ROOT = os.path.abspath('../../..')

import sys
sys.path.append(ROOT)
from scripts.snakemake_module import *

EXPERIMENT = os.path.abspath('.')

configfile: open_config(EXPERIMENT, 'config.yaml')

INFERENCE_PARAMS = ' -u {0}'.format(config['INFERENCE']['POINTS'])
INFERENCE_PARAMS += ' --precision {0}'.format(config['INFERENCE']['PRECISION'])
INFERENCE_PARAMS += ' --ncat {0}'.format(config['INFERENCE']['NCAT'])

INFERENCE_CHAINS = config['INFERENCE_REPLICATE']['CHAINS']
INFERENCE_MODELS = config['INFERENCE_REPLICATE']['MODELS']
INFERENCE_POLYMORPHISM = config['INFERENCE_REPLICATE']['POLYMORPHISM']

PLOT_BURN_IN = config['PLOT']['BURN_IN']
assert (PLOT_BURN_IN < config['INFERENCE']['POINTS'])

for program in ['bayescode']:
    diff_git_dir("{0}/{1}".format(ROOT, program), "{0}/{1}".format(EXPERIMENT, program))

localrules: all, all_profiles, all_traces, bayescode_model, plot_profiles, plot_traces, plot_trees, read_profiles, read_trees

rule all:
    input:
         EXPERIMENT + '/all_profiles',
         EXPERIMENT + '/inference_traces',
         EXPERIMENT + '/inference_node_trees'

rule bayescode_model:
    output:
          model=EXPERIMENT + '/{model}mutsel',
          read=EXPERIMENT + '/read{model}mutsel'
    input: dir=EXPERIMENT + '/bayescode.version'
    shell:
         'cd {ROOT}/bayescode && cp _build/{wildcards.model}mutsel {EXPERIMENT} && cp _build/read{wildcards.model}mutsel {EXPERIMENT}'

rule run_inference:
    output: touch(EXPERIMENT + '/{model}_{polymorphism}_{chain}_run')
    input:
         exec=EXPERIMENT + '/{model}mutsel',
         config=EXPERIMENT + '/config.INFERENCE'
    params:
          time="4-00:00", mem=5000, threads=1,
          poly=lambda w: " -p" if w.polymorphism.lower() == 'true' else "",
    benchmark: EXPERIMENT + "/benchmarks.inference.{model}_{polymorphism}_{chain}_run.tsv"
    log: out=EXPERIMENT + '/{model}_{polymorphism}_{chain}_run.stdout', err=EXPERIMENT + '/{model}_{polymorphism}_{chain}_run.stderr'
    shell: '{input.exec} -a {EXPERIMENT}/CDS.ali -t {EXPERIMENT}/rootedtree.nhx {INFERENCE_PARAMS}{params.poly} {output} 2> {log.err} 1> {log.out}'

rule plot_traces:
    output: plot=directory(EXPERIMENT + '/inference_traces')
    input:
         src=ROOT + "/scripts/plot_traces.py",
         trace=expand(EXPERIMENT + '/{model}_{polymorphism}_{chain}_run', chain=INFERENCE_CHAINS, polymorphism=INFERENCE_POLYMORPHISM, model=INFERENCE_MODELS),
         config=EXPERIMENT + '/config.PLOT'
    log:
       out=EXPERIMENT + '/std.inference_plot.stdout',
       err=EXPERIMENT + '/std.inference_plot.stderr'
    shell:
         'mkdir -p {output.plot} && python3 {input.src} --trace {input.trace} --output {output.plot} --burn_in {PLOT_BURN_IN} 2> {log.err} 1> {log.out}'

rule read_profiles:
    output: EXPERIMENT + '/{model}_{polymorphism}_{chain}_read.siteprofiles'
    input:
         trace=rules.run_inference.output,
         exec=rules.bayescode_model.output.read,
         param_plot=EXPERIMENT + '/config.PLOT'
    benchmark: EXPERIMENT + "/benchmarks.inference_{model}_{polymorphism}_{chain}_read.tsv"
    log:
       out=EXPERIMENT + '/std.{model}_{polymorphism}_{chain}_read.stdout',
       err=EXPERIMENT + '/std.{model}_{polymorphism}_{chain}_read.stderr'
    shell: '{input.exec} --burnin {PLOT_BURN_IN} -s --profiles {output} {input.trace} 2> {log.err} 1> {log.out}'

rule plot_profiles:
    output: prefs=directory(EXPERIMENT + '/inference_{model}_profiles')
    input:
         src=ROOT + "/scripts/plot_profiles.py",
         profiles=expand(EXPERIMENT + '/{{model}}_{polymorphism}_{chain}_read.siteprofiles', chain=INFERENCE_CHAINS, polymorphism=INFERENCE_POLYMORPHISM)
    log:
       out=EXPERIMENT + '/std.{model}_inferred_prefs.stdout',
       err=EXPERIMENT + '/std.{model}_inferred_prefs.stderr'
    shell:
         'mkdir -p {output.prefs} && python3 {input.src} --infer {input.profiles} --output {output.prefs} 2> {log.err} 1> {log.out}'

rule all_profiles:
    output: touch(EXPERIMENT + '/all_profiles')
    input:
         expand(EXPERIMENT + '/inference_{model}_profiles', model=INFERENCE_MODELS)

rule read_trees:
    output: touch(EXPERIMENT + '/{model}_{polymorphism}_{chain}_read')
    input:
         trace=rules.run_inference.output,
         exec=rules.bayescode_model.output.read,
         param_plot=EXPERIMENT + '/config.PLOT'
    benchmark: EXPERIMENT + "/benchmarks.inference_{model}_{polymorphism}_{chain}_read.tsv"
    log:
       out=EXPERIMENT + '/std.{model}_{polymorphism}_{chain}_read_trees.stdout',
       err=EXPERIMENT + '/std.{model}_{polymorphism}_{chain}_read_trees.stderr'
    shell: '{input.exec} --burnin {PLOT_BURN_IN} --newick {input.trace} 2> {log.err} 1> {log.out}'

rule plot_trees:
    output: plot=directory(EXPERIMENT + '/inference_{model}_trees')
    input:
         src=ROOT + "/scripts/plot_trees.py",
         trace=expand(EXPERIMENT + '/{{model}}_{polymorphism}_{chain}_run', chain=INFERENCE_CHAINS, polymorphism=INFERENCE_POLYMORPHISM),
         read=expand(EXPERIMENT + '/{{model}}_{polymorphism}_{chain}_read', chain=INFERENCE_CHAINS, polymorphism=INFERENCE_POLYMORPHISM),
    log:
       out=EXPERIMENT + '/std.{model}_plot_trees.stdout',
       err=EXPERIMENT + '/std.{model}_plot_trees.stderr'
    shell:
         'mkdir -p {output.plot} && python3 {input.src} --trace {input.trace} --output {output.plot} 2> {log.err} 1> {log.out}'