import os
ROOT = os.path.abspath('../../..')

import sys
sys.path.append(ROOT)
from scripts.snakemake_module import *

EXPERIMENT = os.path.abspath('.')

configfile: open_config(EXPERIMENT, 'config.yaml')

INFERENCE_PARAMS = ' -u {0}'.format(config['INFERENCE']['POINTS'])
INFERENCE_PARAMS += ' --precision {0}'.format(config['INFERENCE']['PRECISION'])
INFERENCE_PARAMS += ' --ncat {0}'.format(config['INFERENCE']['NCAT'])

INFERENCE_CHAINS = config['INFERENCE_REPLICATE']['CHAINS']
INFERENCE_MODELS = config['INFERENCE_REPLICATE']['MODELS']
INFERENCE_POLYMORPHISM = config['INFERENCE_REPLICATE']['POLYMORPHISM']

PLOT_BURN_IN = config['PLOT']['BURN_IN']
assert (PLOT_BURN_IN < config['INFERENCE']['POINTS'])

for program in ['bayescode']:
    diff_git_dir("{0}/{1}".format(ROOT, program), "{0}/{1}".format(EXPERIMENT, program))

localrules:all, bayescode_model, plot_traces

rule all:
    input:
         EXPERIMENT + '/inference_traces',
         EXPERIMENT + '/inference_trees'

rule bayescode_model:
    output:
          model=EXPERIMENT + '/{model}mutsel',
          read=EXPERIMENT + '/read{model}mutsel'
    input: dir=EXPERIMENT + '/bayescode.version'
    shell:
         'cd {ROOT}/bayescode && cp _build/{wildcards.model}mutsel {EXPERIMENT} && cp _build/read{wildcards.model}mutsel {EXPERIMENT}'

rule run_inference:
    output: touch(EXPERIMENT + '/{model}_{polymorphism}_{chain}_run')
    input:
         exec=EXPERIMENT + '/{model}mutsel',
         config=EXPERIMENT + '/config.INFERENCE'
    params:
          time="4-00:00", mem=5000, threads=1,
          poly=lambda w: " -p" if w.polymorphism.lower() == 'true' else "",
    benchmark: EXPERIMENT + "/benchmarks.inference.{model}_{polymorphism}_{chain}_run.tsv"
    log: out=EXPERIMENT + '/{model}_{polymorphism}_{chain}_run.stdout', err=EXPERIMENT + '/{model}_{polymorphism}_{chain}_run.stderr'
    shell: '{input.exec} -a {EXPERIMENT}/CDS.ali -t {EXPERIMENT}/rootedtree.nhx {INFERENCE_PARAMS}{params.poly} {output} 2> {log.err} 1> {log.out}'

rule plot_traces:
    output: plot=directory(EXPERIMENT + '/inference_traces')
    input:
         src=ROOT + "/scripts/plot_inference.py",
         run=expand(EXPERIMENT + '/{model}_{polymorphism}_{chain}_run', polymorphism=INFERENCE_POLYMORPHISM, chain=INFERENCE_CHAINS, model=INFERENCE_MODELS),
         config=EXPERIMENT + '/config.PLOT'
    log: out=EXPERIMENT + '/inference_traces.stdout', err=EXPERIMENT + '/inference_traces.stderr'
    shell:
         'mkdir -p {output.plot} && python3 {input.src} --trace {input.run} --output {output.plot} --burn_in {PLOT_BURN_IN} 2> {log.err} 1> {log.out}'

rule read_trees:
    output: plot=touch(EXPERIMENT + '/{model}_{polymorphism}_{chain}_read')
    input:
         exec=EXPERIMENT + '/read{model}mutsel',
         trace=EXPERIMENT + '/{model}_{polymorphism}_{chain}_run',
         config=EXPERIMENT + '/config.PLOT'
    log: out=EXPERIMENT + '/{model}_{polymorphism}_{chain}_read.stdout', err=EXPERIMENT + '/{model}_{polymorphism}_{chain}_read.stderr'
    shell:
         '{input.exec} {input.trace} --newick --burnin {PLOT_BURN_IN} 2> {log.err} 1> {log.out}'

rule plot_tree:
    output: plot=directory(EXPERIMENT + '/inference_trees')
    input:
         src=ROOT + "/scripts/plot_tree.py",
         run=expand(EXPERIMENT + '/{model}_{polymorphism}_{chain}_run', polymorphism=INFERENCE_POLYMORPHISM, chain=INFERENCE_CHAINS, model=INFERENCE_MODELS),
         read=expand(EXPERIMENT + '/{model}_{polymorphism}_{chain}_read', polymorphism=INFERENCE_POLYMORPHISM, chain=INFERENCE_CHAINS, model=INFERENCE_MODELS),
    log: out=EXPERIMENT + '/inference_trees.stdout', err=EXPERIMENT + '/inference_trees.stderr'
    shell:
         'mkdir -p {output.plot} && python3 {input.src} --trace {input.run} --output {output.plot} 2> {log.err} 1> {log.out}'