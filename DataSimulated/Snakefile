import os
ROOT = os.path.abspath('../../..')

import sys
sys.path.append(ROOT)
from scripts.snakemake_module import *

EXPERIMENT = os.path.abspath('.')

configfile: open_config(EXPERIMENT, 'config.yaml')

COMPILE = config['EXPERIMENT']['COMPILE']
TREE = copy_params(EXPERIMENT, ROOT, config['SIMULATION']['TREE'])
PREFERENCES = copy_params(EXPERIMENT, ROOT, config['SIMULATION']['PREFERENCES'])

# Parameters for the simulation
SIMULATION_PARAMS = '--newick ' + TREE
SIMULATION_PARAMS += ' --preferences ' + PREFERENCES
SIMULATION_PARAMS += ' --nuc_matrix ' + copy_params(EXPERIMENT, ROOT, config['SIMULATION']['NUC_MATRIX'])
SIMULATION_PARAMS += ' --precision_matrix ' + copy_params(EXPERIMENT, ROOT, config['SIMULATION']['PRECISION_MATRIX'])
SIMULATION_PARAMS += ' --mutation_rate_per_generation {0}'.format(config['SIMULATION']['MUTATION_RATE_PER_GENERATION'])
SIMULATION_PARAMS += ' --root_age {0}'.format(config['SIMULATION']['ROOT_AGE'])
SIMULATION_PARAMS += ' --generation_time {0}'.format(config['SIMULATION']['GENERATION_TIME'])
SIMULATION_PARAMS += ' --beta {0}'.format(config['SIMULATION']['BETA'])
SIMULATION_PARAMS += ' --exon_size {0}'.format(config['SIMULATION']['EXON_SIZE'])
SIMULATION_PARAMS += ' --seed {0}'.format(config['SIMULATION']['SEED'])
if config['SIMULATION']['BRANCH_WISE_CORRELATION']:
    SIMULATION_PARAMS += ' --branch_wise_correlation'
if config['SIMULATION']['FIXED_POP_SIZES']:
    SIMULATION_PARAMS += ' --fix_pop_size'
if config['SIMULATION']['FIXED_MUT_RATE']:
    SIMULATION_PARAMS += ' --fix_mut_rate'
if config['SIMULATION']['FIXED_GENERATION_TIME']:
    SIMULATION_PARAMS += ' --fix_gen_time'

SIMUPOLY_PARAMS = '--population_size {0}'.format(config['SimuPoly']['POP_SIZE'])
SIMUPOLY_PARAMS += ' --sample_size {0}'.format(config['SimuPoly']['SAMPLE_SIZE'])

SIMUDIV_PARAMS = '--nbr_grid_step {0}'.format(config['SimuDiv']['NBR_GRID_STEP'])

SIMULATION_SIMUMODE_PARAM = {"SimuDiv": SIMUDIV_PARAMS, "SimuPoly": SIMUPOLY_PARAMS}

PLOT_BURN_IN = config['PLOT']['BURN_IN']

# Parameters for the inference
assert (PLOT_BURN_IN < config['INFERENCE']['POINTS'])
INFERENCE_PARAMS = '-t ' + TREE
INFERENCE_PARAMS += ' -u {0}'.format(config['INFERENCE']['POINTS'])
INFERENCE_PARAMS += ' --precision {0}'.format(config['INFERENCE']['PRECISION'])
INFERENCE_PARAMS += ' --ncat {0}'.format(config['INFERENCE']['NCAT'])

INFERENCE_NODE_PARAMS = " "
if config['INFERENCE_NODE']['CLAMP_PREFERENCES']:
    INFERENCE_NODE_PARAMS += ' --profiles ' + copy_params(EXPERIMENT, ROOT, PREFERENCES)
if config['INFERENCE_NODE']['CLAMP_GENERATION_TIME']:
    INFERENCE_NODE_PARAMS += ' --clamp_gen_time'
if config['INFERENCE_NODE']['CLAMP_POP_SIZES']:
    INFERENCE_NODE_PARAMS += ' --clamp_pop_sizes'
if config['INFERENCE_NODE']['CLAMP_NUC_MATRIX']:
    INFERENCE_NODE_PARAMS += ' --clamp_nuc_matrix'
if config['INFERENCE_NODE']['CLAMP_CORR_MATRIX']:
    INFERENCE_NODE_PARAMS += ' --clamp_corr_matrix'
if config['INFERENCE_NODE']['ARITHMETIC']:
    INFERENCE_NODE_PARAMS += ' --arithmetic'

INFERENCE_CHAINS = config['INFERENCE_REPLICATE']['CHAINS']
INFERENCE_MODELS = config['INFERENCE_REPLICATE']['MODELS']
INFERENCE_POLYMORPHISM = config['INFERENCE_REPLICATE']['POLYMORPHISM']
INFERENCE_SIMULATORS = config['INFERENCE_REPLICATE']['SIMULATORS']

for program in ['bayescode', 'SimuEvol']:
    diff_git_dir("{0}/{1}".format(ROOT, program), "{0}/{1}".format(EXPERIMENT, program))

localrules: all, all_profiles, all_traces, plot_simulation, plot_traces, plot_profiles, make_bayescode, bayescode_model, make_simuevol

rule all:
    input:
         EXPERIMENT + '/all_profiles',
         EXPERIMENT + '/all_traces',
         EXPERIMENT + '/all_trees'

rule make_bayescode:
    output: touch(EXPERIMENT + "/make_bayescode")
    input: dir=EXPERIMENT + '/bayescode.version'
    params: compile="&& make clean && make" if COMPILE else ""
    log: out=EXPERIMENT + '/std.bayescode.stdout', err=EXPERIMENT + '/std.bayescode.stderr'
    shell:
         'cd {ROOT}/bayescode {params.compile} 2> {log.err} 1> {log.out}'

rule bayescode_model:
    output:
          model=EXPERIMENT + '/{model}mutsel',
          read=EXPERIMENT + '/read{model}mutsel'
    input: EXPERIMENT + "/make_bayescode"
    shell:
         'cd {ROOT}/bayescode && cp _build/{wildcards.model}mutsel {EXPERIMENT} && cp _build/read{wildcards.model}mutsel {EXPERIMENT}'

rule make_simuevol:
    output:
          EXPERIMENT + '/SimuDiv',
          EXPERIMENT + '/SimuPoly'
    input: dir=EXPERIMENT + '/SimuEvol.version'
    params: compile="&& make clean && make" if COMPILE else ""
    log: out=EXPERIMENT + '/std.SimuEvol.stdout', err=EXPERIMENT + '/std.SimuEvol.stderr'
    shell: 'cd {ROOT}/SimuEvol {params.compile} 2> {log.err} 1> {log.out} && cp build/SimuDiv {EXPERIMENT} && cp build/SimuPoly {EXPERIMENT}'

rule run_simulation:
    output: touch(EXPERIMENT + '/{simumode}_exp')
    input:
         exec=EXPERIMENT + '/{simumode}',
         config_core=EXPERIMENT + '/config.SIMULATION',
         config_pan=EXPERIMENT + '/config.' + '{simumode}'
    params:
          time="0-23:00", mem=5000, threads=1,
          pan=lambda w: SIMULATION_SIMUMODE_PARAM[w.simumode]
    benchmark: EXPERIMENT + "/benchmarks.simulation.{simumode}.tsv"
    log: out=EXPERIMENT + '/std.{simumode}_exp.stdout', err=EXPERIMENT + '/std.{simumode}_exp.stderr'
    shell: '{input.exec} {SIMULATION_PARAMS} {params.pan} --output {output} 2> {log.err} 1> {log.out}'

rule plot_simulation:
    output: plot=directory(EXPERIMENT + '/simulation_{simumode}_plot')
    input:
         src=ROOT + "/scripts/plot_simulation.py",
         simu=rules.run_simulation.output
    log:
         out=EXPERIMENT + '/std.{simumode}_plot.stdout',
         err=EXPERIMENT + '/std.{simumode}_plot.stderr'
    shell: 'mkdir -p {output.plot} && python3 {input.src} --tree {input.simu}.nhx --output {output.plot} '

if config['INFERENCE']['RESTART']:
    rule run_inference:
        output: touch(EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_run')
        input:
             exec=rules.bayescode_model.output.model,
             simu=rules.run_simulation.output
        params:
             time="4-00:00", mem=5000, threads=1,
        benchmark: EXPERIMENT + "/benchmarks.inference.{simumode}_{model}_{polymorphism}_{chain}_run.tsv"
        log:
             out=EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_run.stdout',
             err=EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_run.stderr'
        shell: '{input.exec} {output} 2> {log.err} 1> {log.out}'
else:
    rule run_inference:
        output: touch(EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_run')
        input:
             exec=rules.bayescode_model.output.model,
             simu=rules.run_simulation.output,
             config=EXPERIMENT + '/config.INFERENCE'
        params:
             time="4-00:00", mem=5000, threads=1,
             poly=lambda w: " -p" if w.polymorphism.lower() == 'true' else "",
             node=lambda w: INFERENCE_NODE_PARAMS if w.model == "node" else "",
             traits=lambda w, input: " --traitsfile {0}.traits.tsv".format(input.simu) if (w.model == "node" and config['INFERENCE_NODE']['TRAITS']) else ""
        benchmark: EXPERIMENT + "/benchmarks.inference.{simumode}_{model}_{polymorphism}_{chain}_run.tsv"
        log:
             out=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_run.stdout',
             err=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_run.stderr'
        shell: '{input.exec} -a {input.simu}.ali {INFERENCE_PARAMS}{params.poly}{params.node}{params.traits} {output} 2> {log.err} 1> {log.out}'

rule plot_traces:
    output: plot=directory(EXPERIMENT + '/inference_{simumode}_{model}_traces')
    input:
         src=ROOT + "/scripts/plot_inference.py",
         trace=expand(EXPERIMENT + '/{{simumode}}_{{model}}_{polymorphism}_{chain}_run', chain=INFERENCE_CHAINS, polymorphism=INFERENCE_POLYMORPHISM),
         config=EXPERIMENT + '/config.PLOT'
    log:
         out=EXPERIMENT + '/std.{simumode}_{model}_inference_plot.stdout',
         err=EXPERIMENT + '/std.{simumode}_{model}_inference_plot.stderr'
    shell:
         'mkdir -p {output.plot} && python3 {input.src} --trace {input.trace} --output {output.plot} --burn_in {PLOT_BURN_IN} 2> {log.err} 1> {log.out}'

rule all_traces:
    output: touch(EXPERIMENT + '/all_traces')
    input:
         expand(EXPERIMENT + '/simulation_{simumode}_plot', simumode=INFERENCE_SIMULATORS),
         expand(EXPERIMENT + '/inference_{simumode}_{model}_traces', simumode=INFERENCE_SIMULATORS, model=INFERENCE_MODELS)

rule read_profiles:
    output: EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_read.siteprofiles'
    input:
         trace=rules.run_inference.output,
         exec=rules.bayescode_model.output.read,
         param_plot=EXPERIMENT + '/config.PLOT'
    params: time="0-01:00", mem=5000, threads=1
    benchmark: EXPERIMENT + "/benchmarks.inference_{simumode}_{model}_{polymorphism}_{chain}_read.tsv"
    log:
         out=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_read.stdout',
         err=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_read.stderr'
    shell: '{input.exec} --burnin {PLOT_BURN_IN} -s --profiles {output} {input.trace} 2> {log.err} 1> {log.out}'

rule plot_profiles:
    output: prefs=directory(EXPERIMENT + '/inference_{simumode}_{model}_profiles')
    input:
         src=ROOT + "/scripts/plot_profiles.py",
         profiles=expand(EXPERIMENT + '/{{simumode}}_{{model}}_{polymorphism}_{chain}_read.siteprofiles', chain=INFERENCE_CHAINS, polymorphism=INFERENCE_POLYMORPHISM)
    log:
         out=EXPERIMENT + '/std.{simumode}_{model}_inferred_prefs.stdout',
         err=EXPERIMENT + '/std.{simumode}_{model}_inferred_prefs.stderr'
    shell:
         'mkdir -p {output.prefs} && python3 {input.src} --input {PREFERENCES} --infer {input.profiles} --output {output.prefs} 2> {log.err} 1> {log.out}'

rule all_profiles:
    output: touch(EXPERIMENT + '/all_profiles')
    input:
         expand(EXPERIMENT + '/inference_{simumode}_{model}_profiles', simumode=INFERENCE_SIMULATORS, model=INFERENCE_MODELS)

rule read_trees:
    output: touch(EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_read')
    input:
         trace=rules.run_inference.output,
         exec=rules.bayescode_model.output.read,
         param_plot=EXPERIMENT + '/config.PLOT'
    params:
         time="0-01:00", mem=5000, threads=1
    benchmark: EXPERIMENT + "/benchmarks.inference_{simumode}_{model}_{polymorphism}_{chain}_read.tsv"
    log:
         out=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_read_trees.stdout',
         err=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_read_trees.stderr'
    shell: '{input.exec} --burnin {PLOT_BURN_IN} --newick {input.trace} 2> {log.err} 1> {log.out}'

rule plot_trees:
    output: plot=directory(EXPERIMENT + '/inference_{simumode}_{model}_trees')
    input:
         src=ROOT + "/scripts/plot_tree_and_simulation.py",
         simu=rules.run_simulation.output,
         trace=expand(EXPERIMENT + '/{{simumode}}_{{model}}_{polymorphism}_{chain}_run', chain=INFERENCE_CHAINS, polymorphism=INFERENCE_POLYMORPHISM),
         read=expand(EXPERIMENT + '/{{simumode}}_{{model}}_{polymorphism}_{chain}_read', chain=INFERENCE_CHAINS, polymorphism=INFERENCE_POLYMORPHISM),
    log:
         out=EXPERIMENT + '/std.{simumode}_{model}_plot_trees.stdout',
         err=EXPERIMENT + '/std.{simumode}_{model}_plot_trees.stderr'
    shell:
         'mkdir -p {output.plot} && python3 {input.src} --trace {input.trace} --simulation {input.simu} --output {output.plot} 2> {log.err} 1> {log.out}'

rule all_trees:
    output: touch(EXPERIMENT + '/all_trees')
    input:
         expand(EXPERIMENT + '/inference_{simumode}_node_trees', simumode=INFERENCE_SIMULATORS)
