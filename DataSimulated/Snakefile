import os

ROOT = os.path.abspath('../../..')

import sys

sys.path.append(ROOT)
from scripts.snakemake_module import *

EXPERIMENT = os.path.abspath('.')

configfile: open_config(EXPERIMENT, 'config.yaml')

COMPILE = config['EXPERIMENT']['COMPILE']
TREE = copy_params(EXPERIMENT, ROOT, config['SIMULATION']['TREE'])
if config['SIMULATION']['PREFERENCES'] == "SimuFold":
    PREFERENCES = EXPERIMENT + '/SimuFold_exp.equilibrium.prefs'
else:
    PREFERENCES = copy_params(EXPERIMENT, ROOT, config['SIMULATION']['PREFERENCES'])

# Parameters for the simulation
SIMULATION_PARAMS = '--newick ' + TREE
SIMULATION_PARAMS += ' --nuc_matrix ' + copy_params(EXPERIMENT, ROOT, config['SIMULATION']['NUC_MATRIX'])
SIMULATION_PARAMS += ' --precision_matrix ' + copy_params(EXPERIMENT, ROOT, config['SIMULATION']['PRECISION_MATRIX'])
SIMULATION_PARAMS += ' --mutation_rate_per_generation {0}'.format(config['SIMULATION']['MUTATION_RATE_PER_GENERATION'])
SIMULATION_PARAMS += ' --root_age {0}'.format(config['SIMULATION']['ROOT_AGE'])
SIMULATION_PARAMS += ' --generation_time {0}'.format(config['SIMULATION']['GENERATION_TIME'])
SIMULATION_PARAMS += ' --exon_size {0}'.format(config['SIMULATION']['EXON_SIZE'])
SIMULATION_PARAMS += ' --seed {0}'.format(config['SIMULATION']['SEED'])
if config['SIMULATION']['BRANCH_WISE_CORRELATION']:
    SIMULATION_PARAMS += ' --branch_wise_correlation'
if config['SIMULATION']['FIXED_POP_SIZES']:
    SIMULATION_PARAMS += ' --fix_pop_size'
if config['SIMULATION']['FIXED_MUT_RATE']:
    SIMULATION_PARAMS += ' --fix_mut_rate'
if config['SIMULATION']['FIXED_GENERATION_TIME']:
    SIMULATION_PARAMS += ' --fix_gen_time'

SIMUPOLY_PARAMS = '--population_size {0}'.format(config['SimuPoly']['POP_SIZE'])
SIMUPOLY_PARAMS += ' --beta {0}'.format(config['SimuPoly']['BETA'])
SIMUPOLY_PARAMS += ' --sample_size {0}'.format(config['SimuPoly']['SAMPLE_SIZE'])
SIMUPOLY_PARAMS += ' --noise_sigma {0}'.format(config['SimuPoly']['NOISE_SIGMA'])
SIMUPOLY_PARAMS += ' --noise_theta {0}'.format(config['SimuPoly']['NOISE_THETA'])
SIMUPOLY_PARAMS += ' --preferences ' + PREFERENCES

SIMUDIV_PARAMS = '--nbr_grid_step {0}'.format(config['SimuDiv']['NBR_GRID_STEP'])
SIMUDIV_PARAMS += ' --beta {0}'.format(config['SimuDiv']['BETA'])
SIMUDIV_PARAMS += ' --preferences ' + PREFERENCES

SIMUFOLD_PARAMS = '--nbr_grid_step {0}'.format(config['SimuFold']['NBR_GRID_STEP'])
SIMUFOLD_PARAMS += ' --population_size {0}'.format(config['SimuFold']['POP_SIZE'])
SIMUFOLD_PARAMS += ' --pdb_folder {0}/{1}'.format(ROOT, config['SimuFold']['PDB_FOLDER'])
SIMUFOLD_PARAMS += ' --nbr_exons {0}'.format(config['SimuFold']['NBR_EXONS'])
if 'CUT_OFF' in config['SimuFold']:
    SIMUFOLD_PARAMS += ' --cut_off {0}'.format(config['SimuFold']['CUT_OFF'])

SIMUGEO_PARAMS=""
if 'SimuGeo' in config:
    SIMUGEO_PARAMS += '--nbr_grid_step {0}'.format(config['SimuGeo']['NBR_GRID_STEP'])
    SIMUGEO_PARAMS += ' --pop_size {0}'.format(config['SimuGeo']['POP_SIZE'])
    SIMUGEO_PARAMS += ' --complexity {0}'.format(config['SimuGeo']['COMPLEXITY'])
    SIMUGEO_PARAMS += ' --nbr_exons {0}'.format(config['SimuGeo']['NBR_EXONS'])

SIMULATION_SIMUMODE_PARAM = {"SimuDiv": SIMUDIV_PARAMS, "SimuPoly": SIMUPOLY_PARAMS,
                             "SimuFold": SIMUFOLD_PARAMS, "SimuGeo": SIMUGEO_PARAMS}

PLOT_BURN_IN = config['PLOT']['BURN_IN']

# Parameters for the inference
assert (PLOT_BURN_IN < config['INFERENCE']['POINTS'])
INFERENCE_PARAMS = '-t ' + TREE
INFERENCE_PARAMS += ' -u {0}'.format(config['INFERENCE']['POINTS'])

MUTSEL_PARAMS = ' --precision {0}'.format(config['INFERENCE']['PRECISION'])
MUTSEL_PARAMS += ' --ncat {0}'.format(config['INFERENCE']['NCAT'])

INFERENCE_NODE_PARAMS = " "
if config['INFERENCE_NODE']['CLAMP_PREFERENCES']:
    INFERENCE_NODE_PARAMS += ' --profiles ' + PREFERENCES
if config['INFERENCE_NODE']['MOVE_ROOT_POP_SIZE']:
    INFERENCE_NODE_PARAMS += ' --move_root_pop_size'
if config['INFERENCE_NODE']['CLAMP_POP_SIZES']:
    INFERENCE_NODE_PARAMS += ' --clamp_pop_sizes'
if config['INFERENCE_NODE']['CLAMP_NUC_MATRIX']:
    INFERENCE_NODE_PARAMS += ' --clamp_nuc_matrix'
if config['INFERENCE_NODE']['CLAMP_CORR_MATRIX']:
    INFERENCE_NODE_PARAMS += ' --clamp_corr_matrix'
if config['INFERENCE_NODE']['ARITHMETIC']:
    INFERENCE_NODE_PARAMS += ' --arithmetic'

INFERENCE_CHAINS = config['INFERENCE_REPLICATE']['CHAINS']
INFERENCE_MODELS = config['INFERENCE_REPLICATE']['MODELS']
INFERENCE_POLYMORPHISM = config['INFERENCE_REPLICATE']['POLYMORPHISM']
INFERENCE_SIMULATORS = config['INFERENCE_REPLICATE']['SIMULATORS']

for program in ['bayescode', 'SimuEvol']:
    diff_git_dir("{0}/{1}".format(ROOT, program), "{0}/{1}".format(EXPERIMENT, program))

localrules: all, all_profiles, all_traces, all_trees, make_bayescode, bayescode_model, draw_fossils, make_simuevol, plot_profiles, plot_simulation, plot_traces, plot_trees, read_profiles, read_trees

rule all:
    input:
         # EXPERIMENT + '/all_profiles',
         EXPERIMENT + '/all_traces',
         EXPERIMENT + '/all_trees'

rule make_bayescode:
    output: touch(EXPERIMENT + "/make_bayescode")
    input: dir=EXPERIMENT + '/bayescode.version'
    params: compile="&& make clean && make" if COMPILE else ""
    log: out=EXPERIMENT + '/std.bayescode.stdout', err=EXPERIMENT + '/std.bayescode.stderr'
    shell:
         'cd {ROOT}/bayescode {params.compile} 2> {log.err} 1> {log.out}'

rule bayescode_model:
    output:
          model=EXPERIMENT + '/{model}mutsel',
          read=EXPERIMENT + '/read{model}mutsel'
    input: EXPERIMENT + "/make_bayescode"
    shell:
         'cd {ROOT}/bayescode && cp _build/{wildcards.model}mutsel {EXPERIMENT} && cp _build/read{wildcards.model}mutsel {EXPERIMENT}'

rule make_simuevol:
    output:
          EXPERIMENT + '/SimuDiv',
          EXPERIMENT + '/SimuFold',
          EXPERIMENT + '/SimuGeo',
          EXPERIMENT + '/SimuPoly'
    input: dir=EXPERIMENT + '/SimuEvol.version'
    params: compile="&& make clean && make" if COMPILE else ""
    log: out=EXPERIMENT + '/std.SimuEvol.stdout', err=EXPERIMENT + '/std.SimuEvol.stderr'
    shell: 'cd {ROOT}/SimuEvol {params.compile} 2> {log.err} 1> {log.out} && cp build/SimuDiv {EXPERIMENT} && cp build/SimuFold {EXPERIMENT} && cp build/SimuGeo {EXPERIMENT} && cp build/SimuPoly {EXPERIMENT}'

rule build:
    input:
         expand(EXPERIMENT + '/{model}mutsel', model=INFERENCE_MODELS),
         expand(EXPERIMENT + '/read{model}mutsel', model=INFERENCE_MODELS),
         EXPERIMENT + '/SimuDiv',
         EXPERIMENT + '/SimuFold',
         EXPERIMENT + '/SimuGeo',
         EXPERIMENT + '/SimuPoly'

if config['SIMULATION']['PREFERENCES'] == "SimuFold":
    rule init_simulation:
        output: PREFERENCES
        input:
             exec=EXPERIMENT + '/SimuFold',
             config_core=EXPERIMENT + '/config.SIMULATION',
             config_pan=EXPERIMENT + '/config.SimuFold'
        params:
              pan=SIMULATION_SIMUMODE_PARAM["SimuFold"]
        log: out=EXPERIMENT + '/std.init_SimuFold_exp.stdout', err=EXPERIMENT + '/std.init_SimuFold_exp.stderr'
        shell:
             '{input.exec} {SIMULATION_PARAMS} {params.pan} --initialisation --output {EXPERIMENT}/SimuFold_exp 2> {log.err} 1> {log.out}'

rule run_simulation:
    output: touch(EXPERIMENT + '/{simumode}_exp')
    input:
         exec=EXPERIMENT + '/{simumode}',
         config_core=EXPERIMENT + '/config.SIMULATION',
         config_pan=EXPERIMENT + '/config.' + '{simumode}',
         prefs=PREFERENCES
    params:
          time="3-23:00", mem=300, threads=1,
          pan=lambda wildcards: SIMULATION_SIMUMODE_PARAM[wildcards.simumode]
    benchmark: EXPERIMENT + "/benchmarks.simulation.{simumode}.tsv"
    log: out=EXPERIMENT + '/std.{simumode}_exp.stdout', err=EXPERIMENT + '/std.{simumode}_exp.stderr'
    shell: '{input.exec} {SIMULATION_PARAMS} {params.pan} --output {output} 2> {log.err} 1> {log.out}'

rule plot_simulation:
    output: plot=directory(EXPERIMENT + '/simulation_{simumode}_plot')
    input:
         src=ROOT + "/scripts/plot_simulation.py",
         simu=rules.run_simulation.output
    log:
       out=EXPERIMENT + '/std.{simumode}_plot.stdout',
       err=EXPERIMENT + '/std.{simumode}_plot.stderr'
    shell: 'mkdir -p {output.plot} && python3 {input.src} --tree {input.simu}.nhx --output {output.plot}'

rule draw_fossils:
    output: EXPERIMENT + "/{simumode}_exp.fossils.tsv.drawn"
    input:
         simu=rules.run_simulation.output,
         config=EXPERIMENT + '/config.INFERENCE_NODE'
    run:
        import pandas as pd

        seed = 6584
        df = pd.read_csv(input.simu[0] + ".fossils.tsv", sep="\t")
        df = df.sample(n=min(config['INFERENCE_NODE']['FOSSILS'], df.shape[0]), random_state=seed)
        df.to_csv(input.simu[0] + ".fossils.tsv.drawn", sep="\t", index=False)

if config['INFERENCE']['RESTART']:
    rule run_inference:
        output: touch(EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_run')
        input:
             exec=rules.bayescode_model.output.model,
             simu=rules.run_simulation.output,
             fossils=rules.draw_fossils.output
        params:
              time="18-00:00", mem=1500, threads=1,
        benchmark: EXPERIMENT + "/benchmarks.inference.{simumode}_{model}_{polymorphism}_{chain}_run.tsv"
        log:
           out=EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_run.stdout',
           err=EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_run.stderr'
        shell: '{input.exec} {output} 2> {log.err} 1> {log.out}'
else:
    rule run_inference:
        output: touch(EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_run')
        input:
             exec=rules.bayescode_model.output.model,
             simu=rules.run_simulation.output,
             fossils=rules.draw_fossils.output,
             config=EXPERIMENT + '/config.INFERENCE'
        params:
              time="18-00:00", mem=1500, threads=1,
              mutsel=lambda w: MUTSEL_PARAMS if ("aa" == w.model or "node" == w.model) else "",
              poly=lambda wildcards: " -p" if wildcards.polymorphism.lower() == 'true' else "",
              node=lambda wildcards: INFERENCE_NODE_PARAMS if wildcards.model == "node" else "",
              traits=lambda wildcards, input: " --traitsfile {0}.traits.tsv".format(input.simu) if (
                      wildcards.model == "node" and config['INFERENCE_NODE']['TRAITS']) else "",
              fossils=lambda wildcards, input: " --fossils {0}.fossils.tsv.drawn".format(input.simu) if (
                      wildcards.model == "node" and config['INFERENCE_NODE']['FOSSILS'] > 0) else ""
        benchmark: EXPERIMENT + "/benchmarks.inference.{simumode}_{model}_{polymorphism}_{chain}_run.tsv"
        log:
             out=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_run.stdout',
             err=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_run.stderr'
        shell: '{input.exec} -a {input.simu}.ali {INFERENCE_PARAMS}{params.poly}{params.mutsel}{params.node}{params.traits}{params.fossils} {output} 2> {log.err} 1> {log.out}'

rule inference:
    input: expand(EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_run', simumode=INFERENCE_SIMULATORS, chain=INFERENCE_CHAINS, polymorphism=INFERENCE_POLYMORPHISM, model=INFERENCE_MODELS)

rule plot_traces:
    output: plot=directory(EXPERIMENT + '/inference_{simumode}_traces')
    input:
         src=ROOT + "/scripts/plot_traces.py",
         trace=expand(EXPERIMENT + '/{{simumode}}_{model}_{polymorphism}_{chain}_run', chain=INFERENCE_CHAINS,
                      polymorphism=INFERENCE_POLYMORPHISM, model=INFERENCE_MODELS),
         config=EXPERIMENT + '/config.PLOT'
    log:
       out=EXPERIMENT + '/std.{simumode}_inference_plot.stdout',
       err=EXPERIMENT + '/std.{simumode}_inference_plot.stderr'
    shell:
         'mkdir -p {output.plot} && python3 {input.src} --trace {input.trace} --output {output.plot} --burn_in {PLOT_BURN_IN} 2> {log.err} 1> {log.out}'

rule all_traces:
    output: touch(EXPERIMENT + '/all_traces')
    input:
         expand(EXPERIMENT + '/simulation_{simumode}_plot', simumode=INFERENCE_SIMULATORS),
         expand(EXPERIMENT + '/inference_{simumode}_traces', simumode=INFERENCE_SIMULATORS)

rule read_profiles:
    output: EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_read.siteprofiles'
    input:
         trace=rules.run_inference.output,
         exec=rules.bayescode_model.output.read,
         param_plot=EXPERIMENT + '/config.PLOT'
    benchmark: EXPERIMENT + "/benchmarks.inference_{simumode}_{model}_{polymorphism}_{chain}_read.tsv"
    log:
       out=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_read.stdout',
       err=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_read.stderr'
    shell: '{input.exec} --burnin {PLOT_BURN_IN} -s --profiles {output} {input.trace} 2> {log.err} 1> {log.out}'

rule plot_profiles:
    output: prefs=directory(EXPERIMENT + '/inference_{simumode}_{model}_profiles')
    input:
         src=ROOT + "/scripts/plot_profiles.py",
         profiles=expand(EXPERIMENT + '/{{simumode}}_{{model}}_{polymorphism}_{chain}_read.siteprofiles',
                         chain=INFERENCE_CHAINS, polymorphism=INFERENCE_POLYMORPHISM)
    log:
       out=EXPERIMENT + '/std.{simumode}_{model}_inferred_prefs.stdout',
       err=EXPERIMENT + '/std.{simumode}_{model}_inferred_prefs.stderr'
    params:
         prefs = lambda wildcards: " --input " + PREFERENCES if (wildcards.simumode != "SimuGeo" and wildcards.simumode != "SimuFold") else ""
    shell:
         'mkdir -p {output.prefs} && python3 {input.src}{params.prefs} --infer {input.profiles} --output {output.prefs} 2> {log.err} 1> {log.out}'

rule all_profiles:
    output: touch(EXPERIMENT + '/all_profiles')
    input:
         expand(EXPERIMENT + '/inference_{simumode}_{model}_profiles', simumode=INFERENCE_SIMULATORS,
                model=INFERENCE_MODELS)

rule run_inference_second_pass:
    output: touch(EXPERIMENT + '/second_pass_{simumode}_{polymorphism}_{chain}_run')
    input:
         exec=EXPERIMENT + '/nodemutsel',
         simu=rules.run_simulation.output,
         all_profiles=EXPERIMENT + '/inference_{simumode}_aa_profiles',
         profiles=EXPERIMENT + '/{simumode}_aa_{polymorphism}_{chain}_read.siteprofiles',
         config=EXPERIMENT + '/config.INFERENCE'
    params:
          time="18-00:00", mem=5000, threads=1,
          poly=lambda wildcards: " -p" if wildcards.polymorphism.lower() == 'true' else "",
          prefs=lambda wildcards: EXPERIMENT + '/inference_{simumode}_aa_profiles/{simumode}_aa_{polymorphism}_{chain}_read.prefs',
          traits=lambda wildcards, input: " --traitsfile {0}.traits.tsv".format(input.simu) if config['INFERENCE_NODE'][
              'TRAITS'] else ""
    benchmark: EXPERIMENT + "/benchmarks.inference.second_pass_{simumode}_{polymorphism}_{chain}_run.tsv"
    log:
       out=EXPERIMENT + '/std.{simumode}_AANode_{polymorphism}_{chain}_run.stdout',
       err=EXPERIMENT + '/std.{simumode}_AANode_{polymorphism}_{chain}_run.stderr'
    shell:
         '{input.exec} -a {input.simu}.ali {INFERENCE_PARAMS}{params.poly}{INFERENCE_NODE_PARAMS}{params.traits} --profiles {params.prefs} {output} 2> {log.err} 1> {log.out}'

rule second_pass:
    output: touch(EXPERIMENT + '/second_pass')
    input: expand(EXPERIMENT + '/second_pass_{simumode}_{polymorphism}_{chain}_run', simumode=INFERENCE_SIMULATORS, chain=INFERENCE_CHAINS, polymorphism=INFERENCE_POLYMORPHISM)

rule read_trees:
    output: touch(EXPERIMENT + '/{simumode}_{model}_{polymorphism}_{chain}_read')
    input:
         trace=rules.run_inference.output,
         exec=rules.bayescode_model.output.read,
         param_plot=EXPERIMENT + '/config.PLOT'
    benchmark: EXPERIMENT + "/benchmarks.inference_{simumode}_{model}_{polymorphism}_{chain}_read.tsv"
    log:
       out=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_read_trees.stdout',
       err=EXPERIMENT + '/std.{simumode}_{model}_{polymorphism}_{chain}_read_trees.stderr'
    shell: '{input.exec} --burnin {PLOT_BURN_IN} --newick {input.trace} 2> {log.err} 1> {log.out}'

rule plot_trees:
    output: plot=directory(EXPERIMENT + '/inference_{simumode}_{model}_trees')
    input:
         src=ROOT + "/scripts/plot_trees.py",
         simu=rules.run_simulation.output,
         trace=expand(EXPERIMENT + '/{{simumode}}_{{model}}_{polymorphism}_{chain}_run', chain=INFERENCE_CHAINS,
                      polymorphism=INFERENCE_POLYMORPHISM),
         read=expand(EXPERIMENT + '/{{simumode}}_{{model}}_{polymorphism}_{chain}_read', chain=INFERENCE_CHAINS,
                     polymorphism=INFERENCE_POLYMORPHISM),
    log:
       out=EXPERIMENT + '/std.{simumode}_{model}_plot_trees.stdout',
       err=EXPERIMENT + '/std.{simumode}_{model}_plot_trees.stderr'
    shell:
         'mkdir -p {output.plot} && python3 {input.src} --trace {input.trace} --simulation {input.simu} --output {output.plot} 2> {log.err} 1> {log.out}'

rule all_trees:
    output: touch(EXPERIMENT + '/all_trees')
    input:
         expand(EXPERIMENT + '/inference_{simumode}_node_trees', simumode=INFERENCE_SIMULATORS)
